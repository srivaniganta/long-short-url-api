package com.example.urlshortener.service;

import com.example.urlshortener.common.Base62;
import com.example.urlshortener.dto.LongUrlRequest;
import com.example.urlshortener.dto.ShortUrlRequest;
import com.example.urlshortener.model.DomainEntity;
import com.example.urlshortener.model.UrlEntity;
import com.example.urlshortener.repository.DomainRepository;
import com.example.urlshortener.repository.ShortenerRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UrlServiceImpl implements  URLService {

    Logger logger = LoggerFactory.getLogger(UrlServiceImpl.class);

    private final ShortenerRepository shortenerRepository;
    private final DomainRepository domainRepository;

    @Autowired
    public UrlServiceImpl(ShortenerRepository shortenerRepository,
                          DomainRepository domainRepository) {
        this.shortenerRepository = shortenerRepository;
        this.domainRepository = domainRepository;
    }

    private UrlEntity get(Long id) {
        logger.info(String.format("Fetching Url from database for Id %d", id));
        UrlEntity urlEntity = shortenerRepository.findById(id).get();
        return urlEntity;
    }

    /**
     * Uses the Base62 encoded to convert to Base10 number and fetches the corresponding record from the database
     *
     * @param shortenString Base62 encoded string
     * @return FullUrl object
     */
    public LongUrlRequest getFullUrl(String shortenString) {
        logger.debug("Converting Base 62 string %s to Base 10 id");
        String sanitizedShortValue = sanitizeShortURL(shortenString);
        Long id = Base62.toBase10(sanitizedShortValue);
        logger.info(String.format("Converted Base 62 string %s to Base 10 id %s", shortenString, id));

        logger.info(String.format("Retrieving full url for %d", id));
        return new LongUrlRequest(this.get(id).getFullUrl());
    }

    private UrlEntity save(LongUrlRequest longUrlRequest) {
        UrlEntity urlEntity = new UrlEntity();
        urlEntity.setId(shortenerRepository.getIdWithNextUniqueId());
        urlEntity.setFullUrl(longUrlRequest.getFullUrl());
        return shortenerRepository.save(urlEntity);
    }

    /**
     * It saves the full url to database and uses the autogenerated id to convert to Base62 string
     *
     * @param longUrlRequest FullUrl object to be converted to shortened url
     * @return ShortUrl object
     */
    public ShortUrlRequest getShortUrl(LongUrlRequest longUrlRequest) {

        logger.info("Checking if the url already exists");
        List<UrlEntity> savedUrls = null;
        savedUrls = checkFullUrlAlreadyExists(longUrlRequest);

        UrlEntity savedUrl = null;

        if (savedUrls.isEmpty()) {
            logger.info(String.format("Saving Url %s to database", longUrlRequest.getFullUrl()));
            savedUrl = this.save(longUrlRequest);
            logger.debug(savedUrl.toString());
        }
        else {
            savedUrl = savedUrls.get(0);
            logger.info(String.format("url: %s already exists in the database. skipped insert", savedUrl));
        }

        logger.debug(String.format("Converting Base 10 %d to Base 62 string", savedUrl.getId()));
        String shortUrlText = Base62.toBase62(savedUrl.getId());
        logger.info(String.format("Converted Base 10 %d to Base 62 string %s", savedUrl.getId(), shortUrlText));

        return new ShortUrlRequest(shortUrlText);
    }

    /**
     * Check if Url already exists in the database to prevent having same url stored multiple times
     *
     * @param longUrlRequest
     * @return list of UrlEntity objects, list will be empty if no results found
     */
    private List<UrlEntity> checkFullUrlAlreadyExists(LongUrlRequest longUrlRequest) {
        return shortenerRepository.findUrlByFullUrl(longUrlRequest.getFullUrl());
    }

    public String getDomain(String fullDomain){
        String sanitizeDomain = sanitizeFullURL(fullDomain);

       if(Optional.ofNullable(sanitizeDomain).isPresent())
        {
            Optional<DomainEntity> domainEntity = domainRepository.findByDomain(sanitizeDomain);
            if(domainEntity.isPresent())
                return domainEntity.get().getShortDomain();
            else
                return  null;
        }

       return null;
    }

    private String sanitizeFullURL(String url) {
        if (url.substring(0, 7).equals("http://"))
            url = url.substring(7);

        if (url.substring(0, 8).equals("https://"))
            url = url.substring(8);

        if (url.charAt(url.length() - 1) == '/')
            url = url.substring(0, url.length() - 1);

        return url.substring(0,url.indexOf("/"));
    }

    private String sanitizeShortURL(String shortURL) {
        return shortURL.substring(shortURL.lastIndexOf("/")+1);
    }

}
